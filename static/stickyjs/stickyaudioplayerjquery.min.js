/*
 * Sticky Audio Player - jQuery Plugin
 * Responsive Sticky Audio Player
 *
 * Examples and documentation at: http://tiendasdigitales.net
 *
 * Copyright (c) 2017 Lucas Gabriel Martinez
 *
 * Version: 1.0.0 - 2017/07/26
 * Requires: jQuery v1.3+
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
$(document).ready(function(e) {
	$.fn.stickyAudioPlayer=function(options)
	{
		var $this = this;
		var params=$.extend({
			url:				options.url,
			func:				options.func,
			position:		options.position?options.position:'bottom',
			text:				options.text?options.text:null,
			image:			options.image?options.image:false,
			maxWidth:		options.maxWidth?options.maxWidth:100+'%',
			repeat:			options.repeat?options.repeat:false,
			volume:			options.volume?options.volume:100,
			download:		options.download?options.download:false,
			theme:			options.theme?options.theme:'default'
		},	options);
		var randomId					=	'player'+new Date().getTime();
		var container					=	$(this);
		var fileLength 				= 0;
		var timeProgress  		= 0;
		var volume						=	params.volume;
		var animationSpeed		=	600;
		var boxHeightRemember	=	0;
		var isRunning					=	false;
		var box,boxContainer,audioElement,btnPause,btnPlay,btnStop,textTile,barMain,barProgress,boxCover,textSong,boxData,proceedTo,btnVolume,btnMute,barVolume,barVolumeProgress,maxWidthBarVolume,boxDownload,boxDownloadLink,btnFloat,context,src;
		var setVars	=	function()
		{
			box 							=	$('#'+randomId);
			boxContainer			= $('#'+randomId).find('.stickyAudioPlayerBoxContainer');
			audioElement 			= document.createElement('audio');
			context					= new AudioContext();
			src               		= context.createMediaElementSource(audioElement);
			btnPause 					= $('#'+randomId).find('.player-play .input-pause');
			btnPlay						= $('#'+randomId).find('.player-play .input-play');
			btnStop						= $('#'+randomId).find('.player-play .input-stop');
			textTile					= $('#'+randomId).find('.bar-container .bar-tile');
			barMain						= $('#'+randomId).find('.player-data .bar-container .bar-main');
			barProgress				= $('#'+randomId).find('.player-data .bar-container .bar-main .bar-progress');
			boxCover					= $('#'+randomId).find('figure img');
			textSong					= $('#'+randomId).find('.player-data p');
			boxData						= $('#'+randomId).find('.player-data');
			btnVolume					= $('#'+randomId).find('.player-volume .input-volume');
			btnMute						= $('#'+randomId).find('.player-volume .input-mute');
			barVolume					= $('#'+randomId).find('.player-volume .bar-container .bar-main');
			barVolumeProgress	= $('#'+randomId).find('.player-volume .bar-container .bar-main .bar-progress')
			proceedTo					=	0;
			boxDownload				= $('#'+randomId).find('.player-download');
			boxDownloadLink		= $('#'+randomId).find('.player-download a');

			barMain.css({position:'relative'}); //fix
			boxHeightRemember	=	box.innerHeight();
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				box.css({height:0});
				btnFloat					=	$('.stickyAudioPlayerBoxFloatingButton');
			}else{
				box.css({height:'auto'});
			}
		}
		var createAudio	=	function(file)
		{
			audioElement.setAttribute('src', file);
			// Visualization
				  var analyser = context.createAnalyser();
				  var canvas = document.getElementById("canvas");
				  canvas.width = window.innerWidth;
				  canvas.height = window.innerHeight;
				  var ctx = canvas.getContext("2d");
			  
				  src.connect(analyser);
				  analyser.connect(context.destination);
			  
				  analyser.fftSize = 256;
			  
				  var bufferLength = analyser.frequencyBinCount;
				  console.log(bufferLength);
			  
				  var dataArray = new Uint8Array(bufferLength);
			  
				  var WIDTH = canvas.width;
				  var HEIGHT = canvas.height;
			  
				  var barWidth = (WIDTH / bufferLength) * 2.5;
				  var barHeight;
				  var x = 0;
			  
				  function renderFrame() {
					requestAnimationFrame(renderFrame);
			  
					x = 0;
			  
					analyser.getByteFrequencyData(dataArray);
			  
					ctx.fillStyle = "#0a0c11";
					ctx.fillRect(0, 0, WIDTH, HEIGHT);
			  
					for (var i = 0; i < bufferLength; i++) {
					  barHeight = dataArray[i];
					  
					  var r = barHeight + (25 * (i/bufferLength));
					  var g = 250 * (i/bufferLength);
					  var b = 50;
			  
					  ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
					  ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);
			  
					  x += barWidth + 1;
					}
				  }
			  
				  renderFrame();
			audioElement.addEventListener('ended', function() {
				// use to play my audio
				// $('.playBtn').removeClass('pausebtnsvg').addClass('playbtnsvg');
				if(	params.repeat	)
				{
					play();
				}else{
					// stop();
				}
			}, false);
			audioElement.addEventListener("canplay",function(){
					fileLength = audioElement.duration; //	Seconds
					console.log("Source:" + audioElement.src);
					console.log("Status: Ready to play");
					if(	!isRunning	)
					{
						open();
						isRunning	=	true;
					}
			});
			audioElement.addEventListener("timeupdate",function(){
				timeProgress					=	audioElement.currentTime;
				barProgressSize();
				var currentMin 				= Math.floor(audioElement.currentTime/60);
				var currentSeconds		=	Math.round(	Math.abs(	(currentMin*60) - audioElement.currentTime	)	);
				var timelapse 				=	(	currentMin<10	?	'0'+currentMin	:	currentMin	)+':'+(	currentSeconds<10	?	'0'+currentSeconds	:	currentSeconds	);
				$('#'+randomId).find(".player-data .bar-container small").html(timelapse);
			});
		}
		var init = function()
		{
			createHtml();
			setVars();
			setBoxPosition();
			//Download url
			if(	!params.download	)
			{
				boxDownload.css({display:'none'});
			}else{
				boxDownloadLink.attr('href',	params.download);
			}


			createAudio(params.url);
			btnPlay.click(function() {
					play();
			});
			btnPause.click(function() {
					pause();
			});
			btnStop.click(function() {
					stop();
			});
			barMain.mousemove(function(event)	{
					tileProgress(event);
			});
			barMain.click(function(){
				//Proceed & Play
				pause();
				audioElement.currentTime =	proceedTo;
				play();

			});
			btnVolume.click(function(){
				soundOn();
			});
			btnMute.click(function(){
				mute();
			});
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				btnFloat.click(function(){
					floatClickHide();
				});
			}
			setCover();
			setSongName();
			setMaxWidth();
			setVolume(volume);
			barVolume.mousemove(function(event)	{
					volumeProgress(event);
			});
		}
		var floatClickHide			=	function()
		{
			hide();
			btnFloat.unbind("click");
			btnFloat.find('.input-go-down').toggleClass('input-go-down input-go-up');
			btnFloat.click(function(){
				floatClickShow();
			});
		}
		var floatClickShow			=	function()
		{
			show();
			btnFloat.unbind("click");
			btnFloat.find('.input-go-up').toggleClass('input-go-up input-go-down');
			btnFloat.click(function(){
				floatClickHide();
			});
		}
		var setMaxWidth			=	function()
		{
				boxContainer.css({maxWidth:params.maxWidth,float:'none'});
		}
		var setSongName			=	function()
		{
			if(	params.text	==	null)
			{
				textSong.html( '<span>'+	getFileName(params.url)	+'</span>');
			}else{
				textSong.html( '<span>'+ params.text	+'</span>');
			}
		}
		var getFileName			=	function(path)
		{
	    path = path.substring(path.lastIndexOf("/")+ 1);
	    return (path.match(/[^.]+(\.[^?#]+)?/) || [])[0];
		}
		var setBoxPosition	=	function()
		{
			

			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{

			if($(window).width()<=700){
				box.css({position:'fixed',bottom:0,height:60+'px'});
				btnFloat.css({opacity:0,position:'fixed',right:10+'px',bottom:0,top:'calc(100vh - 88px)'});
				btnFloat.animate({opacity:1},animationSpeed);	
			}else{
				box.css({position:'fixed',bottom:0,height:80+'px'});
				btnFloat.css({opacity:0,position:'fixed',right:10+'px',bottom:0,top:'calc(100vh - 80px - 36px)'});
				btnFloat.animate({opacity:1},animationSpeed);
				// alert('box:'+$(window).height());
				// alert('box:'+box.height());
				// alert('box:'+btnFloat.height());
				// alert('remeber:'+boxHeightRemember);
				// alert('kjkj')
				// top: calc(100vh - 80px - 36px); ,top:'calc(100vh - 80px - 36px)'
			}
			}

			maxWidthBarVolume	= $('#'+randomId).find('.player-volume .bar-container .bar-main').innerWidth();
		}
		var setCover				=	function()
		{
			if(	!params.image && (params.position	==	'bottom'	||	params.position	==	'top')	)
			{
				boxCover.css({display:'none'});
			}else{
				boxCover.css({display:'block'});
				boxCover.attr('src',	!params.image?'':params.image	);
			}
		}
		var barProgressSize = function()
		{
			var width 		= barMain.width();
			var xPercent	= (timeProgress * 100) /	fileLength;
			var nWidth		=	(xPercent * width) /	100;
			barProgress.css({width:nWidth});
		}
		var tileProgress		=	function(event)
		{
			var width 						= barMain.width();
			var mousePosition			=	event.pageX - barProgress.offset().left;
			var xPercent					= (mousePosition * 100) /	width;
			var selectedTime			=	(xPercent * fileLength)	/	100;
			var promiseMin 				= Math.floor(selectedTime/60);
			var promiseSeconds		=	Math.round(	Math.abs(	(promiseMin*60) - selectedTime	)	);
			textTile.html(	(promiseMin<10	?	'0'+promiseMin	:	promiseMin	)+':'+(	promiseSeconds<10	?	'0'+promiseSeconds	:	promiseSeconds	)	);
			textTile.css({position:'absolute',left:mousePosition-15,top:'-25px'});
			proceedTo							=	selectedTime;
		}
		var volumeMouseOver 		= 100;
		var volumeProgress		=	function(event)
		{
			var width 					= barVolume.innerWidth();
			/* Fix width, overflow limit */
			var mousePosition		=	event.pageX - barVolumeProgress.offset().left;
			var xPercent				= (mousePosition * 100) /	width;
			volumeMouseOver			=	(xPercent * 100)	/	100;
			barVolume.click(function(){
				setVolume(volumeMouseOver);
			});

		}
		var stop = function()
		{
			audioElement.currentTime = 0;
			audioElement.pause();
			btnPlay.css({display:'inline-block'});
			btnPause.css({display:'none'});
			btnStop.css({display:'none'});
		}
		var play = function()
		{
			audioElement.play();
			btnPlay.css({display:'none'});
			btnPause.css({display:'inline-block'});
			btnStop.css({display:'none'}); // optional
		}
		var pause = function()
		{
			audioElement.pause();
			btnPlay.css({display:'inline-block'});
			btnPause.css({display:'none'});
			btnStop.css({display:'none'}); // optional
		}
		var mute 	=	function()
		{
			btnVolume.css({display:'block'});
			btnMute.css({display:'none'});
			setVolume(volume);
		}
		var soundOn 	=	function()
		{
			btnVolume.css({display:'none'});
			btnMute.css({display:'block'});
			audioElement.volume = 0;
		}
		var setVolume	=	function(val)
		{
			var width 		= barVolume.innerWidth();
			var nWidth		=	(val * width) /	100;
			if(nWidth>maxWidthBarVolume)
			{
				nWidth = maxWidthBarVolume;
			}
			barVolumeProgress.css({width:nWidth});
			audioElement.volume	=	val == 0 ? 0 : (val/100);
			volume = val;
		}
		var remove		=	function()
		{
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				var goTo =	boxHeightRemember+box.position().top;
				box.animate({height:0},animationSpeed,'',function(){createAudio('');stop();box.remove();});
			}else{
				box.animate({opacity:0},animationSpeed,'',function(){createAudio('');stop();box.remove();});
			}
		}
		var hide			=	function()
		{
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				if($(window).width()<=700){
					// box.css({display:'block'});
				btnFloat.css({top:'calc(100vh - 15px)'});
				box.animate({height:0},animationSpeed,'',function(){box.css({display:'none'});});	
				}else{
					// box.css({display:'block'});
					// var goTo =	$(window).height()-boxHeightRemember+50;
					btnFloat.css({top:'calc(100vh - 15px)'});
					box.animate({height:0},animationSpeed,'',function(){box.css({display:'none'});});
				}
				
				// var goTo =	$(window).height();
				// // btnFloat.animate({top:goTo-btnFloat.height()},animationSpeed);
				// box.animate({height:0},animationSpeed,'',function(){box.css({display:'none'});});
			}else{
				box.animate({opacity:0},animationSpeed,'',function(){box.css({display:'none'});});
			}
		}
		var show			=	function()
		{
			if (	params.position	==	'bottom'	||	params.position	==	'top')
			{
				if($(window).width()<=700){
					box.css({display:'block'});
				btnFloat.css({top:'calc(100vh - 88px)'});
				box.animate({	height:60+'px',	bottom:0	},animationSpeed,'',function(){});	
				}else{
					box.css({display:'block'});
					var goTo =	$(window).height()-boxHeightRemember+50;
					btnFloat.css({top:'calc(100vh - 80px - 36px)'});
					box.animate({	height:80+'px',	bottom:0	},animationSpeed,'',function(){});
				}


			}else{
				box.css({display:'block'});
				box.animate({	opacity:1},animationSpeed,'',function(){});
			}
		}
		var open			=	function()
		{
			show();
		}
		var createHtml	=	function()
		{
			var html = '<section class="'+(params.theme=='default'?'stickyAudioPlayerBox':'stickyAudioPlayerBox'+params.theme)+'" id="'+randomId+'">\
				<div class="stickyAudioPlayerBoxContainer">\
					<figure>\
						<img src="images/cover.png" alt="" />\
					</figure>\
					<section class="player-play">\
						<div class="input-pause"></div>\
						<div class="input-stop"></div>\
						<div class="input-play"></div>\
					</section>\
				  <section class="player-data">\
							<p>Loading...</p>\
						<div class="bar-container">\
							<div class="bar-main">\
								<div class="bar-tile">\
									00:00\
								</div>\
								<div class="bar-progress"></div>\
							</div>\
							<small>00:00</small>\
						</div>\
					</section>\
					<section class="player-volume">\
						<div class="input-volume"></div>\
						<div class="input-mute"></div>\
						<div class="bar-container">\
							<div class="bar-main">\
								<div class="bar-progress"></div>\
							</div>\
						</div>\
					</section>\
					<section class="player-visualization">\
					\<canvas id="canvas"></canvas>\
					</section>\
				</div>\
			</section>'+(	params.position	==	'bottom'	||	params.position	==	'top' ?
			'<section class="stickyAudioPlayerBoxFloatingButton">\
				<div class="input-go-down"></div>\
			</section>':'');
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				container.append(html);
			}else{
				container.html(html);
			}

		}
		$(window).on('resize',function()
		{
			if (	params.position	==	'bottom'	||	params.position	==	'top'	)
			{
				if($(window).width()<=700){
					box.css({position:'fixed',bottom:0,height:60+'px'});
					setMaxWidth();
					btnFloat.css({top:'calc(100vh - 88px)'});
					barProgressSize();
			}else{
				box.css({position:'fixed',bottom:0,height:80+'px'});
				setMaxWidth();
				btnFloat.css({top:'calc(100vh - 80px - 36px)'});
				barProgressSize();
			}
			}
		});
		$(window).on('scroll',function()
		{

		});
		init();
		return {
			changeAudio:	function(url,text,image,title,artist,genre)
			{
				stop();
				createAudio(url);
				textSong.html(	'<span>'	+text+	'</span>'	);
				boxCover.attr('src',	image);
				play();
				mute();

// Media navigator

if ('mediaSession' in navigator) {
	navigator.mediaSession.metadata = new MediaMetadata({
	  title: title,
	  artist: artist,
	  album: genre,
	  artwork: [
		{ src: 'https://app.musixcloud.com/'+image,   sizes: '96x96',   type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '128x128', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '192x192', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '256x256', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '384x384', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '512x512', type: 'image/png' },
	  ]
	});
  
	navigator.mediaSession.setActionHandler('play', function() {
	  audioElement.play()
	});
	navigator.mediaSession.setActionHandler('pause', function() {
		audioElement.pause()
	});
	navigator.mediaSession.setActionHandler('seekbackward', function() {
	   audioElement.currentTime = audioElement.currentTime - 10
	});
	navigator.mediaSession.setActionHandler('seekforward', function() {
	  audioElement.currentTime = audioElement.currentTime +10
	});

  }				
			},
			switchAudio:	function(id,url,text,image,title,artist,genre)
			{
				stop();
				createAudio(url);
				textSong.html(	'<span>'	+text+	'</span>'	);
				boxCover.attr('src',	image);
				play();
				mute();
				// $('.playBtn').removeClass('pausebtnsvg').addClass('playbtnsvg');
				$('#'+id).removeClass('playbtnsvg').addClass('pausebtnsvg');
// Media navigator

if ('mediaSession' in navigator) {
	navigator.mediaSession.metadata = new MediaMetadata({
	  title: title,
	  artist: artist,
	  album: genre,
	  artwork: [
		{ src: 'https://app.musixcloud.com/'+image,   sizes: '96x96',   type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '128x128', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '192x192', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '256x256', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '384x384', type: 'image/png' },
		{ src: 'https://app.musixcloud.com/'+image, sizes: '512x512', type: 'image/png' },
	  ]
	});
  
	navigator.mediaSession.setActionHandler('play', function() {
	  audioElement.play()
	});
	navigator.mediaSession.setActionHandler('pause', function() {
		audioElement.pause()
	});
	navigator.mediaSession.setActionHandler('seekbackward', function() {
	   audioElement.currentTime = audioElement.currentTime - 10
	});
	navigator.mediaSession.setActionHandler('seekforward', function() {
	  audioElement.currentTime = audioElement.currentTime +10
	});

  }
			},
			audioEnd:  function(func)
			{
			audioElement.addEventListener('ended',function(){
				stop()
				$('.playBtn').removeClass('pausebtnsvg').addClass('playbtnsvg');
				func();

			});
			},
			play:	function()
			{
				play();
			},
			pause:	function()
			{
				pause();
			},
			stop:	function()
			{
				stop();
			},
			setVolume:	function(int)
			{
				setVolume(int);
			},
			remove:	function()
			{
				remove();
			},
			hide:	function()
			{
				hide();
			},
			show:	function()
			{
				show();
			},
			mute:	function()
			{
				soundOn();
			},
			unmute:	function()
			{
				mute();
			},
			open:	function()
			{
				open();
			}
		}
	}
});
